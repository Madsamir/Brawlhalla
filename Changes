let characters = [];
let platforms = [];
let characterImg;
let upperPlatformWidth = 150;
let mirroredPlatformWidth = 150;
let keys = {};
let bubbleOffset = 50;
let miniScreenDiameter = 100;
let characterImgs = [];
let animationFrame = 0;
let gameOver = false;
let winner = "";
let rematchButton; // Button for rematch

let initialPositions = [
  { x: 500, y: 300 },
  { x: 1350, y: 300 },
];

let lives = [3, 3];

function preload() {
  characterImg = loadImage("Player1.png");
}

function setup() {
  createCanvas(1905, 900);

  createPlayers();
  createPlatforms();

  // Initialize rematch button but hide it initially
  rematchButton = createButton('Rematch');
  rematchButton.position(width / 2 - 50, height / 2 + 100); // Center the button below the victory text
  rematchButton.size(100, 50);
  rematchButton.mousePressed(resetGame); // Reset game when the button is clicked
  rematchButton.hide(); // Hide until game is over
}

function draw() {
  if (gameOver) {
    displayVictoryScreen();
    return; // Stop the game when a player wins
  }

  background(200);
  handleMovement();

  for (let platform of platforms) {
    fill(platform.color);
    rect(platform.x, platform.y, platform.width, platform.height);
  }

  for (let character of characters) {
    updateCharacter(character);
    displayCharacter(character);
    displayMiniScreen(character); 
  }

  checkPlayerCollision();
  displayLives();
}

function handleMovement() {
  if (keys[65]) { characters[0].x -= characters[0].speed; }
  if (keys[68]) { characters[0].x += characters[0].speed; }
  if (keys[87] && !characters[0].jumping) {
    characters[0].velocityY += characters[0].jumpForce;
    characters[0].jumping = true;
  }

  if (keys[LEFT_ARROW]) { characters[1].x -= characters[1].speed; }
  if (keys[RIGHT_ARROW]) { characters[1].x += characters[1].speed; }
  if (keys[UP_ARROW] && !characters[1].jumping) {
    characters[1].velocityY += characters[1].jumpForce;
    characters[1].jumping = true;
  }

  characters[0].canFallThrough = keys[83];
  characters[1].canFallThrough = keys[DOWN_ARROW];
}

function updateCharacter(character) {
  character.velocityY += character.gravity;
  character.y += character.velocityY;

  for (let platform of platforms) {
    if (!character.canFallThrough &&
      character.y + character.height >= platform.y &&
      character.y + character.height <= platform.y + platform.height &&
      character.x + character.width > platform.x &&
      character.x < platform.x + platform.width) {
      character.y = platform.y - character.height;
      character.velocityY = 0;
      character.jumping = false;
    }

    if (platform.color[0] === 173 && platform.color[1] === 216 && platform.color[2] === 230) {
      if (character.y + character.height >= platform.y &&
          character.x + character.width > platform.x &&
          character.x < platform.x + platform.width) {
        respawnCharacter(character);
      }
    }
  }

  if (character.y > height) {
    character.y = height;
    character.velocityY = 0;
  }
}

function respawnCharacter(character) {
  let index = characters.indexOf(character);
  character.x = initialPositions[index].x;
  character.y = initialPositions[index].y;
  character.velocityY = 0;
}

function displayCharacter(character) {
  image(characterImg, character.x, character.y, character.width, character.height);
}

function displayMiniScreen(character) {
  let bubbleY = character.y + bubbleOffset;
  if (character.y < 0 || character.y > height) {
    fill(255, 255, 255, 150);
    ellipse(character.x + character.width / 2, bubbleY, miniScreenDiameter, miniScreenDiameter);
    let miniCharacterX = character.x + character.width / 2 - character.width / 4;
    let miniCharacterY = bubbleY - character.height / 4;
    image(characterImgs[animationFrame], miniCharacterX, miniCharacterY, character.width * 0.5, character.height * 0.5);
  }
}

function checkPlayerCollision() {
  let player1 = characters[0];
  let player2 = characters[1];

  if (player1.x < player2.x + player2.width &&
      player1.x + player1.width > player2.x &&
      player1.y < player2.y + player2.height &&
      player1.y + player1.height > player2.y) {
    
    if (keys[65] || keys[68]) {
      lives[1]--;
      respawnCharacter(player2);
    } else if (keys[LEFT_ARROW] || keys[RIGHT_ARROW]) {
      lives[0]--;
      respawnCharacter(player1);
    }
  }

  if (lives[0] <= 0) {
    gameOver = true;
    winner = "Player 2";
    rematchButton.show(); // Show the rematch button
  } else if (lives[1] <= 0) {
    gameOver = true;
    winner = "Player 1";
    rematchButton.show(); // Show the rematch button
  }
}

function displayLives() {
  textSize(24);
  fill(255, 0, 0);

  for (let i = 0; i < lives[0]; i++) {
    text("❤️", 50 + i * 30, 50); 
  }

  for (let i = 0; i < lives[1]; i++) {
    text("❤️", width - 150 + i * 30, 50); 
  }
}

function displayVictoryScreen() {
  background(0);
  fill(255);
  textSize(64);
  textAlign(CENTER, CENTER);
  text(`Vinderen er, ${winner} WON!`, width / 2, height / 2);
}

function keyPressed() {
  keys[keyCode] = true;
  if (keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || RIGHT_ARROW) {
    return false;
  }
}

function keyReleased() {
  keys[keyCode] = false;
}

// Function to reset the game state
function resetGame() {
  // Reset player lives
  lives = [3, 3];

  // Reset characters' positions
  for (let i = 0; i < characters.length; i++) {
    characters[i].x = initialPositions[i].x;
    characters[i].y = initialPositions[i].y;
    characters[i].velocityY = 0;
  }

  gameOver = false;
  rematchButton.hide(); // Hide the rematch button again
}

function createPlayers() {
  let character1 = {
    x: initialPositions[0].x,
    y: initialPositions[0].y,
    width: 40,
    height: 40,
    speed: 5,
    gravity: 0.6,
    velocityY: 0,
    jumping: false,
    jumpForce: -15,
    canFallThrough: false,
  };

  let character2 = {
    x: initialPositions[1].x,
    y: initialPositions[1].y,
    width: 40,
    height: 40,
    speed: 5,
    gravity: 0.6,
    velocityY: 0,
    jumping: false,
    jumpForce: -15,
    canFallThrough: false,
  };

  characters.push(character1);
  characters.push(character2);
}

function createPlatforms() {
  platforms.push({ x: 500, y: 450, width: 900, height: 150, color: [92, 64, 47] });
  platforms.push({ x: 0, y: 700, width: 2000, height: 200, color: [173, 216, 230] });
  platforms.push({ x: 650, y: 270, width: upperPlatformWidth, height: 20, color: [90, 90, 90] });
  platforms.push({ x: width - 650 - mirroredPlatformWidth, y: 270, width: mirroredPlatformWidth, height: 20, color: [90, 90, 90] });
  platforms.push({ x: 800, y: 150, width: 300, height: 20, color: [90, 90, 90] });
}
